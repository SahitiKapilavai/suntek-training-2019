Topic: Recursion :-

1.A)Simple Recursive program for Fibonacci Series with given input number of elements 

Code:
#include <stdio.h>
void fib(int a,int b,int n);
void main()
{int n;
printf("Enter the no. of terms: ");
scanf("%d",&n);
printf("Fibonacci Series:");
if(n==1)
    printf("0");
if(n==2)
    printf("0 1");
else
    {printf("0 1 ");
    fib(0,1,n);
    }
}
void fib(int a,int b,int n)
{
   int c;
   if(n==2)
    return;
   c=a+b;
   printf("%d ",c);
   a=b;
   b=c;
   fib(a,b,n-1);
}

---------------------------------------------------------------------------------------------------------------------------

1.B)Recursive program with O(2^n) complexity for Fibonacci Series of given input number, would work for any kind of input 

Code:
#include <stdio.h>
int fib(int n);
void main()
{int n;
printf("Enter a number: ");
scanf("%d",&n);
printf("%d th term of Fibonacci Series: ",n);
if(n==1)
    printf("0");
if(n==2)
    printf("1");
else
    printf("%d",fib(n-1));
}
int fib(int n)
{
   if(n<=1)
    return n;
   else
    return fib(n-1)+fib(n-2);
}

----------------------------------------------------------------------------------------------------------------------------

1.C)Iterative program for Fibonacci Series with given input number of elements
Code:
#include <stdio.h>
void main()
{int n,a=0,b=1,c;
printf("Enter the no. of terms: ");
scanf("%d",&n);
printf("Fibonacci Series:");
if(n==1)
    printf("0");
if(n==2)
    printf("0 1");
else
    {printf("0 1 ");
     while(n-2)
     {
       c=a+b;
       printf("%d ",c);
       a=b;
       b=c;
       n--;
     }
    }
}

----------------------------------------------------------------------------------------------------------------------------

2.A)Recursive program for Factorial of given input number, would work for any kind of input 

Code:
#include <stdio.h>
int fact(int n);
void main()
{int n,r;
printf("Enter a number: ");
scanf("%d",&n);
r=fact(n);
printf("Factorial of n is:%d",r);
}
int fact(int n)
{int c;
 if(n<=2)
    return n;
 else
    return n*fact(n-1);
}

----------------------------------------------------------------------------------------------------------------------------

2.B)Iterative program for factorial of given number , would work for any kind of input

Code:
#include <stdio.h>
void main()
{int r=1,n,i;
    printf("Enter a number:");
    scanf("%d",&n);
    for(i=n;i>=1;i--)
    r=r*i;
    printf("The value of it's factorial is:%d",r);
}

----------------------------------------------------------------------------------------------------------------------------

3.A)Program for pow(x,n) (x^n) using recursive approach

Code:
#include <stdio.h>
int pow(int x,int n);
void main()
{int n,r=1,x;
printf("Enter a number and power: ");
scanf("%d %d",&x,&n);
r=pow(x,n);
printf("The value of %d power %d is:%d",x,n,r);
}
int pow(int x,int n)
{
    int r;
    if(n==1)
        return x;
    r=x*pow(x,n-1);
}

----------------------------------------------------------------------------------------------------------------------------

3.B)Program for pow(x,n) (x^n) using iterative approach

Code:
#include <stdio.h>
void main()
{int n,r,i,x;
printf("Enter a number and power: ");
scanf("%d %d",&x,&n);
r=x;
for(i=1;i<n;i++)
    r=r*x;
printf("The value of %d power %d is:%d",x,n,r);
}

----------------------------------------------------------------------------------------------------------------------------

4.A)Program for x^n Mod M (Modular Exponentiation) using recursive approach.

Code:
#include <stdio.h>
int pow(int x,int n);
void main()
{int x,n,m,r,t;
printf("Enter the values of x,n,m in x^n Mod m:");
scanf("%d %d %d",&x,&n,&m);
t=pow(x,n);
r=t%m;
printf("The value of x^n Mod m is: %d",r);
}
int pow(int x,int n)
{
    int r;
    if(n==1)
        return x;
    r=x*pow(x,n-1);
}

----------------------------------------------------------------------------------------------------------------------------

4.B)Program for x^n Mod M (Modular Exponentiation) using iterative approach.

Code:
#include <stdio.h>
void main()
{int n,r,m,i,x;
printf("Enter the values of x,n,m in x^n Mod m:");
scanf("%d %d %d",&x,&n,&m);
r=x;
for(i=1;i<n;i++)
    r=r*x;
r=r%m;
printf("The value of x^n Mod m is: %d",r);
}

----------------------------------------------------------------------------------------------------------------------------

5.A)Program to find given prime no or not using recursive approach.

Code:
#include <stdio.h>
int prime(int n, int i);
void main()
{   int n,r;
    printf("Enter a number: ");
    scanf("%d", &n);
    r=prime(n,n/2);
    if (r==1)
    printf("%d is a prime number\n", n);
    else
    printf("%d is not a prime number\n", n);
}
int prime(int n,int i)
{
    if(i==1)
    return 1;
    else
     if(n%i==0)
         return 0;
       else
         return prime(n,i-1);
}


----------------------------------------------------------------------------------------------------------------------------

5.B)Program to find given prime no or not using iterative approach.

Code:
#include <stdio.h>
int main()
{
    int n,i,f=0;
    printf("Enter a number: ");
    scanf("%d", &n);
    for(i = 2; i <= n/2; ++i)
    {
        if(n%i == 0)
        {
            f=1;
            break;
        }
    }
    if (n==1) 
    {
      printf("1 is neither prime nor composite");
    }
    else 
    {
        if (f==0)
          printf("%d is a prime number", n);
        else
          printf("%d is not a prime number", n);
    }
    
    return 0;
}

----------------------------------------------------------------------------------------------------------------------------


Topics:Arrays, Searching & Matrix :-



1.)Find the contiguous subarray within an array (containing at least one number) which has the largest sum.

Code:

----------------------------------------------------------------------------------------------------------------------------

2.)Given a N*N square matrix, return an array of its diagonals

Code:
#include <stdio.h>
#include <stdlib.h>

int min(int a, int b)
{ return (a < b)? a: b; }

int max(int a, int b)
{ return (a > b)? a: b; }

int main()
{
    int a[100][100],i,j,r,c,f,l,scol;
    printf("Enter the number of rows and columns: ");
    scanf("%d %d",&r,&c);
    printf("Enter the matrix: ");
    for (i=0; i<r; i++)
    {for (j=0; j<c; j++)
            scanf("%d",&a[i][j]);
    }
    printf ("Given matrix is: \n");
    for (i=0; i< r; i++)
    {
        for (j=0; j<c; j++)
            printf("%5d ", a[i][j]);
        printf("\n");
    }

    printf ("\nDiagonal printing of matrix is: \n");
     for (l=1; l<=(r+c-1); l++)
    {
        scol=max(0, l-r);
        f = min(l,(c-scol));
        for(j=0; j<f; j++)
            printf("%5d ",a[min(r,l)-j-1][scol+j]);
        printf("\n");
    }

    return 0;
}

----------------------------------------------------------------------------------------------------------------------------

3.)Given an unsorted integer array, find the first missing positive integer.

Code:
#include <stdio.h>
void main()
{
int n,a[100],t,i,min,f=0,j=1,misi=0,r=0;
printf("Enter the size of array: ");
scanf("%d",&n);
printf("Enter the elements of array: ");
for(i=0;i<n;i++)
    scanf("%d",&a[i]);
min=a[0];
for(i=1;i<n;i++)
if(a[i]<min)
    {   min=a[i];
    }
x:if(min>0)
{for(i=0;i<n;i++)
{if(a[i]==min+j)
    {
     j++;
     i=-1;
    }
 else
 {if(i!=n-1)
     continue;
  else
    {misi=min+j;
     break; }
 }
}}
else
{for(i=0;i<n;i++)
    if(a[i]==1)
    {f=1;
    }
 if(f==1)
 {min=1;
  goto x;
 }
 if(f==0)
    r=1;
}
if(misi!=0)
{
 r=misi;
 goto y;
}
if(i==n-1)
{
    r=a[n-1]+1;
}
y:printf("The missing value is: %d",r);
}

----------------------------------------------------------------------------------------------------------------------------

4.)Given an unsorted integer array, find the first repetitive positive integer.

Code:

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

5.)You are given a read only array of n integers from 1 to n. Each integer appears exactly once except A which appears twice and B which is missing. Return A and B.

Code:










